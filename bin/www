const mongoose = require('mongoose')
const app = require('../app')
const wss = require('../wss')
const debug = require('debug')('demo:server')
const http = require('http')
const config = require('../config')

connectMongo(_ => {
  const port = normalizePort(config.port || '3000')

  const server = http.createServer(app.callback())

  wss(server, app)

  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
})


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = this.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}

/**
 * 连接数据库
 */
function connectMongo(cb) {
  mongoose.Promise = global.Promise
  mongoose.connect(config.mongo_host, {
    useMongoClient: true
  }).then(_ => {
    console.error('连接数据库成功')
    cb()
  }).catch(err => {
    console.error('连接数据库失败：', err)
    process.exit(1)
  })
}
